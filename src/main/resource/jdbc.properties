jdbc.driver=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://rm-bp10y0ndbs6504088.mysql.rds.aliyuncs.com:3306/dream_pool?characterEncoding=UTF-8
#jdbc.url=jdbc:mysql://rm-bp10y0ndbs6504088.mysql.rds.aliyuncs.com:3306/dream_pool?characterEncoding=UTF-8
jdbc.url=jdbc:mysql://localhost:3306/dream_pool?characterEncoding=UTF-8
jdbc.username=dreamer
jdbc.password=dreamer
 
#<!--initialSize: 初始化连接-->  
jdbc.initialSize=5
#<!--maxActive: 最大连接数量-->  
jdbc.maxActive=50
#<!-- 最大空闲连接 --> 
jdbc.maxIdle=10
#<!-- 最小空闲连接 -->
jdbc.minIdle=5
#<!--是否在自动回收超时连接的时候打印连接的超时错误 -->
jdbc.logAbandoned=true
#<!--是否自动回收超时连接 -->
jdbc.removeAbandoned=true
#<!--超时时间(以秒数为单位) -->
jdbc.removeAbandonedTimeout=180
#<!--超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 -->
jdbc.maxWait=800
#<!--验证数据库连接的有效性 -->
jdbc.validationQuery=SELECT 1
#<!--false表示每次从连接池中取出连接时，不需要执行validationQuery -->
jdbc.testOnBorrow=false
#<!--取得连接时是否进行有效性验证（即是否还和数据库连通的）-->
#jdbc.testOnBorrow=true
#<!--返回连接时是否进行有效性验证（即是否还和数据库连通的）-->
#jdbc.testOnReturn=true
#<!--连接空闲时是否进行有效性验证（即是否还和数据库连通的）-->
jdbc.testWhileIdle=true
#<!--他们两个配合，可以持续更新连接池中的连接对象，当 timeBetweenEvictionRunsMillis 大于0时，-->
#<!--每过 timeBetweenEvictionRunsMillis 时间，就会启动一个线程，校验连接池中闲置时间超过 minEvictableIdleTimeMillis的连接对象。-->
jdbc.timeBetweenEvictionRunsMillis=30000
jdbc.minEvictableIdleTimeMillis=1800000
